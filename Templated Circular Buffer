#include <iostream>

using namespace std;
template<class T>
class circular_buffer{
public:
    circular_buffer(int c);
    ~circular_buffer();
    void push_back(int d);
    void pop_front();
    int size() const;
    const T& operator[](int i) const;
private:
    T* data;
    T front,rear;
    T capacity;
    
};
template<class T>
circular_buffer <T>::circular_buffer(int c) // constructor
{
    rear=-1;
    front=0;
    capacity = c;
    data= new int [capacity];
    
}

template<class T>
void circular_buffer<T>::push_back(int d)
{
    if(rear==-1 && front==0)
    {
        rear=(rear+1)%capacity;
        data[rear]=d;
    }
    
    else if((rear+1)%capacity!=front)
    {
        rear=(rear+1)%capacity;
        data[rear]=d;
    }
    
    else if((rear+1)%capacity==front)
    {
        rear =(rear+1)%capacity;
        data[rear]=d;
        front=(front+1)%capacity;
    }
    
}
template<class T>
void circular_buffer<T>::pop_front()
{
    //int e=data[rear];
    front=(front+1)%capacity;
    
    
    
    
}

template<class T>
int circular_buffer<T>::size() const
{
    
    if(rear >= front)
        return (rear-front+1);
    else
        return (capacity +rear-front+1);
}

template<class T>
const T& circular_buffer<T>::operator[](int i) const
{
    return data[(front+i)%capacity];
}


template<class T>
circular_buffer <T>::~circular_buffer() // destructor
{
    delete [] data;
}

int main()
{
    int capacity;
    cin >> capacity;
    circular_buffer<int> cbi(capacity);
    
    int N;
    cin >> N;
    for(int i=0; i<N; i++){
        string cmd;
        cin >> cmd;
        if(cmd=="push_back"){
            int data;
            cin >> data;
            cbi.push_back(data);
        }else if(cmd=="pop_front"){
            cbi.pop_front();
        }else if(cmd=="print"){
            for(int j=0; j<cbi.size(); j++){
                cout << cbi[j] << endl;
            }
            cout << "----" << endl;
        }
    }
    return 0;
}
